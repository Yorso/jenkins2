<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.jorge</groupId>
	<artifactId>jenkins2</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>jenkins2</name>
	<description>Jenkins testing</description>

	<properties>
		<java.version>1.8</java.version>
		<spring.version>4.3.0.RELEASE</spring.version>
		<db.user>user1</db.user>
		<db.password>user1pass</db.password>
		<groovy.version>1.8.8</groovy.version>
  		<gmaven.version>1.5</gmaven.version>
	</properties>

	<!-- <parent> <groupId>com.firecrestclinical.patient-portal</groupId> <artifactId>patient-portal-uat</artifactId> 
		<version>1.10.0-SNAPSHOT</version> </parent> -->

	<dependencies>

		<!-- Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Spring Core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring JDBC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- MySQL DataBase Connector -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.9</version>
		</dependency>

		<!-- MongoDB -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver</artifactId>
			<version>3.3.0</version>
		</dependency>

		<!-- Jetty -->
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty</artifactId>
			<version>6.1.25</version>
		</dependency>

		<dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>1.8.5</version>
        </dependency>
        
		<!-- JUnit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>

		<!-- spring-test Maven dependency for testing a method using the Spring's 
			application context with JUnit 4 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.1.1.RELEASE</version>
			<scope>test</scope>
		</dependency>

		<!-- Necessary for unit testing controller methods -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.codehaus.cargo</groupId>
			<artifactId>cargo-core-api-module</artifactId>
			<version>1.4.3</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>dependency-maven-plugin</artifactId>
			<version>1.0</version>
		</dependency>
		
	</dependencies>

	<build>
		<!-- finalName>jenkins2</finalName -->
		<plugins>
			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<escapeWindowsPaths>true</escapeWindowsPaths>
				</configuration>
			</plugin-->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>

			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin-->

			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<configuration>
					<attach>false</attach>
					<skipSource>true</skipSource>
				</configuration>
			</plugin-->

			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.19.1</version>
					</dependency>
				</dependencies>
			</plugin-->

			<!-- Jetty -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.4.2</version>

				<executions>
					<execution>
						<id>start-container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<wait>false</wait>
						</configuration>
					</execution>
					<execution>
						<id>stop-container</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>

				<configuration>

					<container>
						<timeout>2980000</timeout>
						<containerId>jetty7x</containerId>
						<type>embedded</type>
						<!-- home>/opt/jetty</home -->
						<dependencies>
							<dependency>
								<location>${basedir}/target/test-classes/</location>
							</dependency>
						</dependencies>
					</container>

					<configuration>
						<properties>
							<!-- Changing Jetty port to avoid problems with other servers -->
							<cargo.servlet.port>8181</cargo.servlet.port>
							<cargo.logging>medium</cargo.logging>
						</properties>
					</configuration>

					<deployables>

						<deployable>
							<groupId>com.jorge</groupId>
							<artifactId>jenkins2</artifactId>
							<type>war</type>
							<properties>
								<context>/jenkins2</context>
							</properties>
						</deployable>

					</deployables>

				</configuration>

			</plugin>

			<!-- MySQL -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>1.5</version>

				<dependencies>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>5.1.9</version>
					</dependency>
				</dependencies>

				<!-- General configuration for all executes below -->
				<configuration>
					<driver>com.mysql.jdbc.Driver</driver>
					<!-- URL without db name because if this db doesn't exist and we try 
						to drop it or create it, it will give us an error thought we have 'onError 
						continue' in general configuration and 'IF EXISTS' in 'sqlCommand'. They 
						don't work and give us an error -->
					<url>jdbc:mysql://localhost:3306?useUnicode=true&amp;characterEncoding=UTF-8</url>
					<!-- url>jdbc:mysql://localhost:3306/jenkins_test_db?useUnicode=true&amp;characterEncoding=UTF-8</url -->
					<username>${db.user}</username>
					<password>${db.password}</password>
					<autocommit>true</autocommit>
					<onError>continue</onError>
					<skip>${maven.test.skip}</skip>
				</configuration>

				<executions>

					<execution>
						<id>drop-schema</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<!-- Local configuration for only this execution -->
						<configuration>
							<!-- We can use sql command in pom... -->
							<sqlCommand>DROP SCHEMA IF EXISTS `jenkins_test_db`;</sqlCommand>
						</configuration>
					</execution>

					<execution>
						<id>create-blank-schema</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<!-- ... or make a reference to a sql file in project -->
							<srcFiles>
								<srcFile>src/test/resources/sql/create_schema.sql</srcFile>
							</srcFiles>
						</configuration>
					</execution>

					<execution>
						<id>create-user-table</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<srcFiles>
								<srcFile>src/test/resources/sql/create_user_table.sql</srcFile>
							</srcFiles>
						</configuration>
					</execution>

					<execution>
						<id>insert-data</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<srcFiles>
								<srcFile>src/test/resources/sql/insert_data.sql</srcFile>
							</srcFiles>
						</configuration>
					</execution>

				</executions>
			</plugin>

			<!-- MongoDB and Groovy -->
            <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>${gmaven.version}</version>
                    <executions>
                        <execution>
                            <id>run-mongo-tests</id>
                            <goals><goal>execute</goal></goals>
                            <phase>pre-integration-test</phase>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
							<groupId>org.mongodb</groupId>
							<artifactId>mongodb-driver</artifactId>
							<version>3.3.0</version>
						</dependency>
                        
                        <!-- dependency>
					        <groupId>org.codehaus.gmaven.runtime</groupId>
					        <artifactId>gmaven-runtime-1.8</artifactId>
					        <version>${gmaven.version}</version>
					      </dependency>
					      <dependency>
					        <groupId>org.codehaus.groovy</groupId>
					        <artifactId>groovy-all</artifactId>
					        <version>${groovy.version}</version>
					      </dependency-->
                    </dependencies>
                    <configuration>
                    	<providerSelection>1.8</providerSelection>
                        <source>${basedir}/src/test/resources/nosql/mongodb_test.groovy</source>
                    </configuration>
            </plugin>
		</plugins>
		
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.gmaven
										</groupId>
										<artifactId>
											gmaven-plugin
										</artifactId>
										<versionRange>
											[1.5,)
										</versionRange>
										<goals>
											<goal>compile</goal>
											<goal>testCompile</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>